<?php

namespace Sowp\ArticleBundle\Entity;

use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\EntityRepository;

/**
 * ArticleRepository.
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    // All query
    public function findAllQueryBuilder()
    {
        return $this->createQueryBuilder('a');
    }

    public function findAllQuery()
    {
        return $this->findAllQueryBuilder()->getQuery();
    }

    // Deleted query
    public function findDeletedQueryBuilder()
    {
        $now = new \DateTime('now');

        $qb = $this->createQueryBuilder('a')
            ->where('a.deletedAt < ?1')
            ->setParameter(1, $now);

        return $qb;
    }

    public function findDeletedQuery()
    {
        return $this->findDeletedQueryBuilder()->getQuery();
    }

    public function findDeleted()
    {
        return $this->findDeletedQuery()->getResult();
    }

    public function findDeletedById($id)
    {
        $qb = $this->findDeletedQueryBuilder();
        $this->filterById($qb, $id);

        return $qb->getQuery()->getOneOrNullResult();
    }

    // Published query
    public function findPublishedQueryBuilder()
    {
        $now = new \DateTime('now');

        $qb = $this->createQueryBuilder('a')
            ->where('a.deletedAt > ?1')
            ->orWhere('a.deletedAt IS NULL')
            ->setParameter(1, $now);

        return $qb;
    }

    public function findPublishedQuery()
    {
        return $this->findPublishedQueryBuilder()->getQuery();
    }

    public function findPublished()
    {
        return $this->findPublishedQuery()->getResult();
    }

    public function findPublishedById($id)
    {
        $qb = $this->findPublishedQueryBuilder();
        $this->filterById($qb, $id);

        return $qb->getQuery()->getOneOrNullResult();
    }

    // With authors
    public function findAllWithAuthorsQueryBuilder()
    {
        $qb = $this->findAllQueryBuilder();
        $this->joinAuthorsData($qb);

        return $qb;
    }

    public function findPublishedWithAuthorsQueryBuilder()
    {
        $qb = $this->findPublishedQueryBuilder();
        $this->joinAuthorsData($qb);

        return $qb;
    }

    public function findDeletedWithAuthorsQueryBuilder()
    {
        $qb = $this->findDeletedQueryBuilder();
        $this->joinAuthorsData($qb);

        return $qb;
    }

    // Join/Filter functions
    public function joinAuthorsData(QueryBuilder $qb)
    {
        $qb
            ->leftjoin('a.createdBy', 'cb')
            ->leftjoin('a.modifitedBy', 'mb')
            ->select(['a', 'cb', 'mb']);
    }

    public function filterById(QueryBuilder $qb, $id)
    {
        $qb->andWhere($qb->expr()->eq('a.id', $id));
    }

    public function countAllArticles()
    {
        return $this
            ->createQueryBuilder('art')
            ->select('COUNT(art.id)')
            ->getQuery()
            ->getSingleScalarResult();
    }
}
